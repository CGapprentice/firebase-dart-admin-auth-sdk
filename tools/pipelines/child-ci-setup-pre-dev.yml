stages:
  - validation
  - analyze

validate_branch_name:
  stage: validation
  script:
    - echo "Validating branch name..."
    - |
      BRANCH_NAME=$CI_COMMIT_BRANCH
      echo "Branch name: $BRANCH_NAME"

      if echo "$BRANCH_NAME" | grep -Eq "^(development|qa|beta|main)$"; then
        echo "✅ Branch name '$BRANCH_NAME' is valid for protected branches (development, qa, beta, main)."
      elif echo "$BRANCH_NAME" | grep -Eq "^(feat|fix|hotfix|chore|test|refactor|release)/[a-z0-9_-]+$"; then
        echo "✅ Branch name '$BRANCH_NAME' follows the naming convention."
      else
        echo "❌ Branch name '$BRANCH_NAME' does not follow the naming convention: <type>/<branch-name>"
        echo "Valid types: feat, fix, hotfix, chore, test, refactor, release, development, qa, beta, main"
        exit 1
      fi


validate_commit_messages:
  stage: validation
  needs:
    - validate_branch_name
  script:
    - echo "Validating commit messages..."
    - |
      REGEX="^(feat|fix|hotfix|chore|test|refactor|release)(\([a-z0-9_-]+\))?: .{1,72}$"
      INVALID_COMMITS=$(git log -1 --format=%s | grep -vE "$REGEX" || true)

      if [ -n "$INVALID_COMMITS" ]; then
        echo "❌ The following commit messages do not follow the convention:"
        echo "$INVALID_COMMITS"
        echo ""
        echo "Commit message format must follow:"
        echo "<type>(<scope>): <short summary>"
        echo "Examples:"
        echo "  feat(auth): add OAuth 2.0 support"
        echo "  fix(payment): resolve rounding error in total calculation"
        exit 1
      else
        echo "✅ All commit messages follow the convention."
      fi

# Analyze Main Project
analyze_main:
  stage: analyze
  image: dart:stable
  needs: 
    - validate_commit_messages
  script:
    - echo "Starting analysis for the main project..."
    - cd firebase-dart-admin-auth-sdk
    - pwd
    - echo "Listing contents of the current directory..."
    - ls -la

    # Install dependencies
    - echo "Installing dependencies for the main project using dart pub get..."
    - |
      if ! dart pub get; then
        echo "Failed to install dependencies for the main project. Exiting..."
        exit 1
      fi

    # Run analysis with detailed error handling
    - echo "Running dart analyze for the main project..."
    - |
      if ! dart analyze lib/ > analysis_report.txt 2> error_log.txt; then
        echo "Analysis failed with errors. Details:"
        cat error_log.txt
        echo "Full analysis report:"
        cat analysis_report.txt
        exit 1
      else
        echo "Analysis completed successfully. No critical errors found."
      fi

    # Filter analysis output
    - echo "Filtering relevant analysis results (excluding test/unit files)..."
    - grep -E "(Missing documentation for a public member|info|warning|error)" analysis_report.txt | grep -vE "^test/unit" > filtered_report.txt || echo "No relevant issues found for the main project."

    # Identify responsible developers for each file with issues
    - echo "Identifying responsible developers for issues in the main project..."
    - |
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          git_log=$(git log -n 1 --pretty=format:"%h by %an <%ae>" -- "$file")
          echo "File: $file - Last modified by: $git_log"
          echo "Issue: $line"
        else
          echo "No file information could be extracted for: $line"
        fi
      done < filtered_report.txt

    - echo "Main project analysis complete. Check filtered_report.txt for details."
  artifacts:
    paths:
      - firebase-dart-admin-auth-sdk/analysis_report.txt
      - firebase-dart-admin-auth-sdk/error_log.txt
      - firebase-dart-admin-auth-sdk/filtered_report.txt
    expire_in: 1h

# Analyze Example Project
analyze_example:
  stage: analyze
  image: ghcr.io/cirruslabs/flutter:stable
  needs: 
    - validate_commit_messages
  script:
    - echo "Starting analysis for the example project..."
    - cd firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app
    - pwd
    - echo "Listing contents of the current directory..."
    - ls -la

    # Install dependencies
    - echo "Installing dependencies for the example project using flutter pub get..."
    - |
      if ! flutter pub get; then
        echo "Failed to install dependencies for the example project. Exiting..."
        exit 1
      fi

    # Run analysis with detailed error handling
    - echo "Running dart analyze for the example project..."
    - |
      if ! dart analyze > analysis_report.txt 2> error_log.txt; then
        echo "Analysis failed with errors. Details:"
        cat error_log.txt
        echo "Full analysis report:"
        cat analysis_report.txt
        exit 1
      else
        echo "Analysis completed successfully. No critical errors found."
      fi

    # Filter analysis output
    - echo "Filtering relevant analysis results (excluding test/unit files)..."
    - grep -E "(Missing documentation for a public member|info|warning|error)" analysis_report.txt | grep -vE "^test/unit" > filtered_report.txt || echo "No relevant issues found for the example project."

    # Identify responsible developers for each file with issues
    - echo "Identifying responsible developers for issues in the example project..."
    - |
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          git_log=$(git log -n 1 --pretty=format:"%h by %an <%ae>" -- "$file")
          echo "File: $file - Last modified by: $git_log"
          echo "Issue: $line"
        else
          echo "No file information could be extracted for: $line"
        fi
      done < filtered_report.txt

    - echo "Example project analysis complete. Check filtered_report.txt for details."
  artifacts:
    paths:
      - firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app/analysis_report.txt
      - firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app/error_log.txt
      - firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app/filtered_report.txt
    expire_in: 1h
