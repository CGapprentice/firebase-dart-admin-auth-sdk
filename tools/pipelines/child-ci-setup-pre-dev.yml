stages:
  - validate
  - analyze

validate_branch_name:
  stage: validate
  script:
    - echo "Validating branch name..."
    - |
      BRANCH_NAME=$CI_COMMIT_BRANCH
      echo "Branch name: $BRANCH_NAME"

      if echo "$BRANCH_NAME" | grep -Eq "^(development|qa|beta|main)$"; then
        echo "✅ Valid branch name for protected branches: $BRANCH_NAME."
      elif echo "$BRANCH_NAME" | grep -Eq "^(feat|fix|hotfix|chore|test|refactor|release)/[a-z0-9_-]+$"; then
        echo "✅ Branch name follows naming convention: $BRANCH_NAME."
      else
        echo "❌ Invalid branch name: $BRANCH_NAME."
        echo "Expected format: <type>/<branch-name>. Valid types: feat, fix, hotfix, chore, test, refactor, release, development, qa, beta, main."
        exit 1
      fi
  rules:
   - when: always

validate_commit_messages:
  stage: validate
  image: alpine:latest
  script:
    - apk add --no-cache git bash grep
    - git --version
    - echo "Validating commit messages..."
    - |
      REGEX="^(feat|fix|hotfix|chore|test|refactor|release)(\([a-z0-9_-]+\))?: .{1,72}$"
      INVALID_COMMITS=$(git log -1 --format=%s | grep -vE "$REGEX" || true)

      if [ -n "$INVALID_COMMITS" ]; then
        echo "❌ Commit message does not follow convention:"
        echo "$INVALID_COMMITS"
        echo "Expected format: <type>(<scope>): <short summary>."
        echo "Examples:"
        echo "  feat(auth): add OAuth 2.0 support"
        echo "  fix(payment): resolve rounding error in total calculation"
        exit 1
      else
        echo "✅ Commit message follows the convention."
      fi

analyze_main:
  stage: analyze
  image: dart:stable
  needs: 
    - validate_commit_messages
  script:
    - echo "Analyzing main project..."
    - cd firebase-dart-admin-auth-sdk
    - dart pub get || { echo "Failed to install dependencies. Exiting..."; exit 1; }
    - dart analyze lib/ > analysis_report.txt 2> error_log.txt || true

    # Filter and summarize analysis results
    - echo "Separating issues into categories..."
    - grep -i "info" analysis_report.txt > info_issues.txt || true
    - grep -i "warning" analysis_report.txt > warning_issues.txt || true
    - grep -i "error" analysis_report.txt > error_issues.txt || true
    - echo "Summary of analysis issues:"
    - |
      info_count=$(wc -l < info_issues.txt || echo 0)
      warning_count=$(wc -l < warning_issues.txt || echo 0)
      error_count=$(wc -l < error_issues.txt || echo 0)
      echo "Info Issues: $info_count"
      echo "Warning Issues: $warning_count"
      echo "Error Issues: $error_count"

    # Check for outdated dependencies
    - echo "Checking for outdated dependencies..."
    - dart pub outdated || true

    # Encourage collaboration by highlighting contributors who worked on relevant areas
    - echo "Collaboratively resolving identified issues..."
    - |
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          git_log=$(git log -n 1 --pretty=format:"%h by %an <%ae>" -- "$file")
          echo "File: $file - Last modified by: $git_log"
          echo "Suggested collaboration: Work with the contributor to address the issue."
        fi
      done < error_issues.txt

    - echo "Main project analysis complete. Check categorized issue files for details."
  artifacts:
    paths:
      - firebase-dart-admin-auth-sdk/info_issues.txt
      - firebase-dart-admin-auth-sdk/warning_issues.txt
      - firebase-dart-admin-auth-sdk/error_issues.txt
    expire_in: 1h

analyze_example:
  stage: analyze
  image: ghcr.io/cirruslabs/flutter:stable
  needs: 
    - analyze_main
  script:
    - echo "Analyzing example project..."
    - cd firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app
    - flutter pub get || { echo "Failed to install dependencies. Exiting..."; exit 1; }
    - dart analyze > analysis_report.txt 2> error_log.txt || true

    # Filter and summarize analysis results
    - echo "Separating issues into categories..."
    - grep -i "info" analysis_report.txt > info_issues.txt || true
    - grep -i "warning" analysis_report.txt > warning_issues.txt || true
    - grep -i "error" analysis_report.txt > error_issues.txt || true
    - echo "Summary of analysis issues:"
    - |
      info_count=$(wc -l < info_issues.txt || echo 0)
      warning_count=$(wc -l < warning_issues.txt || echo 0)
      error_count=$(wc -l < error_issues.txt || echo 0)
      echo "Info Issues: $info_count"
      echo "Warning Issues: $warning_count"
      echo "Error Issues: $error_count"

    # Check for outdated dependencies
    - echo "Checking for outdated dependencies..."
    - dart pub outdated || true

    # Encourage collaboration by highlighting contributors who worked on relevant areas.
    - echo "Collaboratively resolving identified issues..."
    - |
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          git_log=$(git log -n 1 --pretty=format:"%h by %an <%ae>" -- "$file")
          echo "File: $file - Last modified by: $git_log"
          echo "Suggested collaboration: Work with the contributor to address the issue."
        fi
      done < error_issues.txt

    - echo "Example project analysis complete. Check categorized issue files for details."
  artifacts:
    paths:
      - firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app/info_issues.txt
      - firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app/warning_issues.txt
      - firebase-dart-admin-auth-sdk/example/firebase-dart-admin-auth-sdk-sample-app/error_issues.txt
    expire_in: 1h
